{"version":3,"sources":["Posts.js","actions/postsAction.js","Home.js","About.js","Contact.js","Error.js","App.js","serviceWorker.js","reducers/postsReducer.js","reducers/index.js","sagas/getPostsWatcherSaga.js","sagas/addPostWatcherSaga.js","sagas/index.js","store.js","index.js"],"names":["Posts","state","openModal","description","title","handleToggleModal","setState","handleChange","event","target","name","value","handleSubmit","post","props","addPost","setTimeout","this","getPosts","prevProps","isSuccess","isLoading","posts","Segment","key","Button","onClick","primary","style","minHeight","Dimmer","active","Loader","content","Item","Group","length","map","id","Content","Header","as","Meta","body","Description","Divider","Modal","open","onClose","closeIcon","centered","Form","Field","control","Input","label","placeholder","onChange","TextArea","Actions","loading","color","Component","connect","postsReducer","dispatch","type","payload","Home","Container","About","Contact","Error","App","Menu","fixed","inverted","header","to","exact","path","component","Boolean","window","location","hostname","match","initialState","PostsReducer","action","rootReducer","combineReducers","getPostsWorkerSaga","getPostsWatcherSaga","a","axios","get","response","data","message","call","put","takeLatest","addPostWorkerSaga","addPostWatcherSaga","rootSaga","all","interceptors","request","use","config","headers","error","Promise","reject","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.dd3c14b8.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport {\r\n    Segment,\r\n    Item,\r\n    Divider,\r\n    Button,\r\n    Loader,\r\n    Dimmer,\r\n    Header,\r\n    Modal,\r\n    Form,\r\n    Input,\r\n    TextArea\r\n} from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\nimport { getPosts, addPost } from './actions'\r\n\r\n\r\nclass Posts extends Component {\r\n\r\n    state = {\r\n        openModal: false,\r\n        description: '',\r\n        title: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getPosts()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.isSuccess !== this.props.isSuccess) {\r\n            this.setState({\r\n                openModal: false,\r\n                description: '',\r\n                title: ''\r\n            })\r\n        }\r\n    }\r\n\r\n    handleToggleModal = () => {\r\n        this.setState({\r\n            openModal: !this.state.openModal,\r\n            description: '',\r\n            title: ''\r\n        })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const { title, description } = this.state\r\n        let post = {\r\n            title,\r\n            description\r\n        }\r\n        this.props.addPost(post)\r\n\r\n        setTimeout(() => {\r\n            this.setState({\r\n                openModal: false,\r\n                description: '',\r\n                title: ''\r\n            })\r\n        }, 1500)\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, posts} = this.props\r\n        const { openModal, description, title } = this.state\r\n        return(\r\n            <Fragment>\r\n                <Segment key={1}>\r\n                    <Button onClick={this.handleToggleModal} primary>Add Post</Button>\r\n                </Segment>\r\n                <Segment key={2} style={{minHeight: '100px'}}>\r\n                    {isLoading\r\n                    ? <Dimmer active>\r\n                        <Loader content='Loading' />\r\n                    </Dimmer>\r\n                    : <Item.Group>\r\n                        {(posts.length > 0) && posts.map(post => {\r\n                            return (\r\n                                <Fragment key={post.id}>\r\n                                    <Item key={post.id}>\r\n                                        <Item.Content>\r\n                                            <Item.Header as='a'>{post.title}</Item.Header>\r\n                                            <Item.Meta>{post.body}</Item.Meta>\r\n                                            <Item.Description></Item.Description>\r\n                                        </Item.Content>\r\n                                    </Item>\r\n                                    <Divider />\r\n                                </Fragment>\r\n                            )\r\n                        })}\r\n                    </Item.Group>}\r\n                </Segment>\r\n                <Modal\r\n                    open={openModal}\r\n                    onClose={this.handleToggleModal}\r\n                    closeIcon\r\n                    centered={false}\r\n                >\r\n                    <Header content='Add New Post' />\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Form.Field\r\n                                id='title'\r\n                                control={Input}\r\n                                label='Title'\r\n                                name='title'\r\n                                value={title}\r\n                                placeholder='Title here...'\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <Form.Field\r\n                                id='description'\r\n                                control={TextArea}\r\n                                label='Description'\r\n                                name='description'\r\n                                value={description}\r\n                                placeholder='Description here...'\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </Form>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button onClick={this.handleToggleModal}>\r\n                           Cancel\r\n                        </Button>\r\n                        <Button loading={isLoading} onClick={this.handleSubmit} color='green'>\r\n                            Save\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.postsReducer.posts,\r\n    isLoading: state.postsReducer.isLoading\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getPosts: () => dispatch(getPosts()),\r\n    addPost: (post) => dispatch(addPost(post))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts)\r\n","export const GET_POSTS_REQUEST = 'GET_POSTS_REQUEST'\r\nexport const GET_POSTS_REQUEST_SUCCESS = 'GET_POSTS_REQUEST_SUCCESS'\r\nexport const GET_POSTS_REQUEST_FAILED = 'GET_POSTS_REQUEST_FAILED'\r\n\r\nexport const getPosts = () => ({ type: GET_POSTS_REQUEST })\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST'\r\nexport const ADD_POST_REQUEST_SUCCESS = 'ADD_POST_REQUEST_SUCCESS'\r\nexport const ADD_POST_REQUEST_FAILED = 'ADD_POST_REQUEST_FAILED'\r\n\r\nexport const addPost = (payload) => ({\r\n    type: ADD_POST_REQUEST,\r\n    payload\r\n})","import React from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\nimport Posts from './Posts'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <Container>\r\n            <p>Home page</p>\r\n            <Posts />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <Container>About page</Container>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <Container>Contact page</Container>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nconst Error = () => {\r\n    return (\r\n        <Container>Page not found</Container>\r\n    )\r\n}\r\n\r\nexport default Error;","import React from 'react'\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom'\nimport { Menu, Segment } from 'semantic-ui-react'\nimport Home from './Home'\nimport About from './About'\nimport Contact from './Contact'\nimport Error from './Error'\n\n\nconst App = () => {\n\n    return (\n      <BrowserRouter>\n        <Segment>\n          <Menu fixed='top' inverted>\n              <Menu.Item header>\n                <Link to=\"/\">React App</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/\">Home</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/about\">About</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/contact\">Contact US</Link>\n              </Menu.Item>\n          </Menu>\n        </Segment>\n        <Segment>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route component={Error} />\n          </Switch>\n        </Segment>\n      </BrowserRouter>\n    )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    GET_POSTS_REQUEST,\r\n    GET_POSTS_REQUEST_FAILED,\r\n    GET_POSTS_REQUEST_SUCCESS,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_REQUEST_SUCCESS,\r\n    ADD_POST_REQUEST_FAILED\r\n} from '../actions'\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    isLoading: false\r\n}\r\n\r\nconst PostsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_POSTS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case GET_POSTS_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                posts: action.payload.posts,\r\n                isLoading: false\r\n            }\r\n        case GET_POSTS_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case ADD_POST_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                posts: [\r\n                    {...action.payload.post},\r\n                    ...state.posts\r\n                ],\r\n                isLoading: false\r\n            }\r\n        case ADD_POST_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default PostsReducer;","import { combineReducers } from 'redux'\r\nimport postsReducer from './postsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    postsReducer\r\n})\r\n  \r\nexport default rootReducer","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport {\r\n    GET_POSTS_REQUEST,\r\n    GET_POSTS_REQUEST_FAILED,\r\n    GET_POSTS_REQUEST_SUCCESS\r\n} from '../actions'\r\nimport axios from 'axios'\r\n\r\nconst getPosts = async () => {\r\n    try {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        return response.data\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nfunction* getPostsWorkerSaga() {\r\n    try {\r\n        const posts = yield call(getPosts)\r\n        yield put({\r\n            type: GET_POSTS_REQUEST_SUCCESS,\r\n            payload: { posts }\r\n        })\r\n    } catch (error) {\r\n        yield put({ type: GET_POSTS_REQUEST_FAILED })\r\n    }\r\n}\r\n\r\nexport function* getPostsWatcherSaga() {\r\n    yield takeLatest(GET_POSTS_REQUEST, getPostsWorkerSaga)\r\n}","import { call, put, takeLatest } from 'redux-saga/effects'\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_REQUEST_SUCCESS,\r\n    ADD_POST_REQUEST_FAILED\r\n} from '../actions'\r\nimport axios from 'axios'\r\n\r\nconst addPost = async (data) => {\r\n    try {\r\n        const response = await axios.post('https://jsonplaceholder.typicode.com/posts', data)\r\n        return response.data\r\n    } catch (error) {\r\n        return error.message\r\n    }\r\n}\r\n\r\nfunction* addPostWorkerSaga(action) {\r\n    try {\r\n        const post = yield call(addPost, action.payload)\r\n        yield put({\r\n            type: ADD_POST_REQUEST_SUCCESS,\r\n            payload: {\r\n                post: {\r\n                    title: post.title,\r\n                    body: post.description\r\n                }\r\n            }\r\n        })\r\n    } catch (error) {\r\n        yield put({ type: ADD_POST_REQUEST_FAILED })\r\n    }\r\n}\r\n\r\nexport function* addPostWatcherSaga() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPostWorkerSaga)\r\n}","import { all } from 'redux-saga/effects'\r\nimport { getPostsWatcherSaga } from './getPostsWatcherSaga'\r\nimport { addPostWatcherSaga } from './addPostWatcherSaga'\r\nimport axios from 'axios'\r\n\r\naxios.interceptors.request.use(function (config) {\r\n    // config.baseURL = 'https://jsonplaceholder.typicode.com/'\r\n    config.headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n    config.headers['Accept'] = 'application/json';\r\n  \r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        getPostsWatcherSaga(),\r\n        addPostWatcherSaga()\r\n    ])\r\n}","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\n\r\nimport rootReducer from './reducers'\r\nimport rootSaga from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 }) || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from  './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}